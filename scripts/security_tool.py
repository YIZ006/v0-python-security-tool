#!/usr/bin/env python3
"""
Information Security Tool
C√¥ng c·ª• An to√†n Th√¥ng tin

Author: v0
Description: Comprehensive security tool with system info, web security checks, 
             hash operations, encryption/decryption, and network utilities.
"""

import os
import sys
import socket
import hashlib
import platform
import subprocess
import threading
import time
import ssl
import json
from urllib.parse import urlparse
from datetime import datetime
import secrets
import base64

# Import th∆∞ vi·ªán b·ªï sung (c·∫ßn c√†i ƒë·∫∑t)
try:
    import requests
    from requests.packages.urllib3.exceptions import InsecureRequestWarning
    requests.packages.urllib3.disable_warnings(InsecureRequestWarning)
except ImportError:
    print("‚ö†Ô∏è  C·∫ßn c√†i ƒë·∫∑t: pip install requests")
    sys.exit(1)

try:
    from cryptography.fernet import Fernet
    from cryptography.hazmat.primitives.ciphers import Cipher, algorithms, modes
    from cryptography.hazmat.backends import default_backend
except ImportError:
    print("‚ö†Ô∏è  C·∫ßn c√†i ƒë·∫∑t: pip install cryptography")
    sys.exit(1)

try:
    from scapy.all import sniff, IP, TCP, UDP, ICMP
except ImportError:
    print("‚ö†Ô∏è  C·∫ßn c√†i ƒë·∫∑t: pip install scapy")
    print("‚ö†Ô∏è  L∆∞u √Ω: Scapy c·∫ßn quy·ªÅn admin/root ƒë·ªÉ ch·∫°y packet sniffing")

class SecurityTool:
    def __init__(self):
        self.banner = """
‚ïî‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïó
‚ïë                    INFORMATION SECURITY TOOL                 ‚ïë
‚ïë                        C√¥ng c·ª• B·∫£o m·∫≠t                      ‚ïë
‚ïö‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïù
        """
        
    def show_banner(self):
        """Hi·ªÉn th·ªã banner c·ªßa tool"""
        print(self.banner)
        print(f"üïí Th·ªùi gian: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 62)
    
    def show_menu(self):
        """Hi·ªÉn th·ªã menu ch√≠nh"""
        menu = """
üìã MENU CH√çNH:
1. üñ•Ô∏è  Th√¥ng tin h·ªá th·ªëng (System Info)
2. üåê Ki·ªÉm tra b·∫£o m·∫≠t website (Web Security)
3. üîê Hash & M·∫≠t kh·∫©u (Hash & Password)
4. üîí M√£ h√≥a / Gi·∫£i m√£ (Encryption/Decryption)
5. üåç Network Tools
6. ‚ùå Tho√°t (Exit)
        """
        print(menu)
    
    # ==================== 1. SYSTEM INFO ====================
    def get_system_info(self):
        """Thu th·∫≠p th√¥ng tin h·ªá th·ªëng"""
        print("\nüñ•Ô∏è  TH√îNG TIN H·ªÜ TH·ªêNG")
        print("=" * 50)
        
        try:
            # Th√¥ng tin c∆° b·∫£n
            print(f"üîπ H·ªá ƒëi·ªÅu h√†nh: {platform.system()} {platform.release()}")
            print(f"üîπ Ki·∫øn tr√∫c: {platform.architecture()[0]}")
            print(f"üîπ Hostname: {socket.gethostname()}")
            
            # L·∫•y IP address
            hostname = socket.gethostname()
            local_ip = socket.gethostbyname(hostname)
            print(f"üîπ IP Local: {local_ip}")
            
            # L·∫•y MAC address
            mac = self.get_mac_address()
            if mac:
                print(f"üîπ MAC Address: {mac}")
            
            # Qu√©t port local
            print(f"\nüîç Qu√©t c√°c c·ªïng m·ªü tr√™n {local_ip}:")
            self.scan_local_ports(local_ip)
            
        except Exception as e:
            print(f"‚ùå L·ªói khi l·∫•y th√¥ng tin h·ªá th·ªëng: {e}")
    
    def get_mac_address(self):
        """L·∫•y MAC address"""
        try:
            import uuid
            mac = ':'.join(['{:02x}'.format((uuid.getnode() >> elements) & 0xff) 
                           for elements in range(0,2*6,2)][::-1])
            return mac
        except:
            return None
    
    def scan_local_ports(self, host, start_port=1, end_port=1000):
        """Qu√©t c√°c c·ªïng m·ªü tr√™n m√°y local"""
        open_ports = []
        
        def scan_port(port):
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(0.1)
                result = sock.connect_ex((host, port))
                if result == 0:
                    open_ports.append(port)
                sock.close()
            except:
                pass
        
        print(f"   ƒêang qu√©t c·ªïng {start_port}-{end_port}...")
        threads = []
        
        for port in range(start_port, end_port + 1):
            thread = threading.Thread(target=scan_port, args=(port,))
            threads.append(thread)
            thread.start()
            
            # Gi·ªõi h·∫°n s·ªë thread ƒë·ªìng th·ªùi
            if len(threads) >= 100:
                for t in threads:
                    t.join()
                threads = []
        
        # ƒê·ª£i c√°c thread c√≤n l·∫°i
        for t in threads:
            t.join()
        
        if open_ports:
            print(f"   ‚úÖ T√¨m th·∫•y {len(open_ports)} c·ªïng m·ªü:")
            for port in sorted(open_ports):
                service = self.get_service_name(port)
                print(f"      - Port {port}: {service}")
        else:
            print("   ‚ùå Kh√¥ng t√¨m th·∫•y c·ªïng m·ªü n√†o")
    
    def get_service_name(self, port):
        """L·∫•y t√™n d·ªãch v·ª• theo port"""
        common_ports = {
            21: "FTP", 22: "SSH", 23: "Telnet", 25: "SMTP",
            53: "DNS", 80: "HTTP", 110: "POP3", 143: "IMAP",
            443: "HTTPS", 993: "IMAPS", 995: "POP3S",
            3389: "RDP", 5432: "PostgreSQL", 3306: "MySQL"
        }
        return common_ports.get(port, "Unknown")
    
    # ==================== 2. WEB SECURITY ====================
    def web_security_check(self):
        """Ki·ªÉm tra b·∫£o m·∫≠t website"""
        print("\nüåê KI·ªÇM TRA B·∫¢O M·∫¨T WEBSITE")
        print("=" * 50)
        
        url = input("üîó Nh·∫≠p URL website (v√≠ d·ª•: https://example.com): ").strip()
        if not url:
            print("‚ùå URL kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        if not url.startswith(('http://', 'https://')):
            url = 'https://' + url
        
        try:
            print(f"\nüîç ƒêang ki·ªÉm tra: {url}")
            
            # Ki·ªÉm tra HTTP headers
            self.check_security_headers(url)
            
            # Ki·ªÉm tra SSL/TLS
            if url.startswith('https://'):
                self.check_ssl_certificate(url)
            
            # Ki·ªÉm tra redirect
            self.check_redirects(url)
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra website: {e}")
    
    def check_security_headers(self, url):
        """Ki·ªÉm tra c√°c HTTP security headers"""
        print("\nüìã KI·ªÇM TRA SECURITY HEADERS:")
        
        try:
            response = requests.get(url, timeout=10, verify=False)
            headers = response.headers
            
            security_headers = {
                'X-Frame-Options': 'B·∫£o v·ªá kh·ªèi clickjacking',
                'X-Content-Type-Options': 'NgƒÉn MIME type sniffing',
                'X-XSS-Protection': 'B·∫£o v·ªá kh·ªèi XSS',
                'Strict-Transport-Security': '√âp d√πng HTTPS',
                'Content-Security-Policy': 'NgƒÉn code injection',
                'Referrer-Policy': 'Ki·ªÉm so√°t referrer info'
            }
            
            for header, description in security_headers.items():
                if header in headers:
                    print(f"   ‚úÖ {header}: {headers[header]}")
                else:
                    print(f"   ‚ùå {header}: THI·∫æU - {description}")
            
            print(f"\nüìä Status Code: {response.status_code}")
            print(f"üìä Server: {headers.get('Server', 'Unknown')}")
            
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra headers: {e}")
    
    def check_ssl_certificate(self, url):
        """Ki·ªÉm tra ch·ª©ng ch·ªâ SSL/TLS"""
        print("\nüîí KI·ªÇM TRA CH·ª®NG CH·ªà SSL/TLS:")
        
        try:
            parsed_url = urlparse(url)
            hostname = parsed_url.hostname
            port = parsed_url.port or 443
            
            context = ssl.create_default_context()
            with socket.create_connection((hostname, port), timeout=10) as sock:
                with context.wrap_socket(sock, server_hostname=hostname) as ssock:
                    cert = ssock.getpeercert()
                    
                    print(f"   ‚úÖ Subject: {dict(x[0] for x in cert['subject'])}")
                    print(f"   ‚úÖ Issuer: {dict(x[0] for x in cert['issuer'])}")
                    print(f"   ‚úÖ Version: {cert['version']}")
                    print(f"   ‚úÖ Not Before: {cert['notBefore']}")
                    print(f"   ‚úÖ Not After: {cert['notAfter']}")
                    
                    # Ki·ªÉm tra h·∫°n s·ª≠ d·ª•ng
                    not_after = datetime.strptime(cert['notAfter'], '%b %d %H:%M:%S %Y %Z')
                    days_left = (not_after - datetime.now()).days
                    
                    if days_left > 30:
                        print(f"   ‚úÖ Ch·ª©ng ch·ªâ c√≤n hi·ªáu l·ª±c {days_left} ng√†y")
                    elif days_left > 0:
                        print(f"   ‚ö†Ô∏è  Ch·ª©ng ch·ªâ s·∫Øp h·∫øt h·∫°n trong {days_left} ng√†y")
                    else:
                        print(f"   ‚ùå Ch·ª©ng ch·ªâ ƒë√£ h·∫øt h·∫°n {abs(days_left)} ng√†y")
                        
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra SSL: {e}")
    
    def check_redirects(self, url):
        """Ki·ªÉm tra redirect nguy hi·ªÉm"""
        print("\nüîÑ KI·ªÇM TRA REDIRECTS:")
        
        try:
            response = requests.get(url, timeout=10, allow_redirects=False, verify=False)
            
            if response.status_code in [301, 302, 303, 307, 308]:
                location = response.headers.get('Location', '')
                print(f"   ‚ö†Ô∏è  Redirect detected: {response.status_code}")
                print(f"   üîó Location: {location}")
                
                # Ki·ªÉm tra redirect nguy hi·ªÉm
                if location.startswith('http://'):
                    print("   ‚ùå NGUY HI·ªÇM: Redirect t·ª´ HTTPS sang HTTP!")
                elif not location.startswith(('https://', '/')):
                    print("   ‚ö†Ô∏è  C·∫£nh b√°o: Redirect ƒë·∫øn domain kh√°c!")
                else:
                    print("   ‚úÖ Redirect an to√†n")
            else:
                print("   ‚úÖ Kh√¥ng c√≥ redirect")
                
        except Exception as e:
            print(f"‚ùå L·ªói khi ki·ªÉm tra redirect: {e}")
    
    # ==================== 3. HASH & PASSWORD ====================
    def hash_operations(self):
        """C√°c thao t√°c v·ªõi hash v√† m·∫≠t kh·∫©u"""
        print("\nüîê HASH & M·∫¨T KH·∫®U")
        print("=" * 50)
        
        while True:
            print("\nüìã Ch·ªçn ch·ª©c nƒÉng:")
            print("1. T·∫°o hash t·ª´ text")
            print("2. Ki·ªÉm tra hash v·ªõi wordlist")
            print("3. Quay l·∫°i menu ch√≠nh")
            
            choice = input("\nüëâ L·ª±a ch·ªçn (1-3): ").strip()
            
            if choice == '1':
                self.generate_hash()
            elif choice == '2':
                self.crack_hash()
            elif choice == '3':
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
    
    def generate_hash(self):
        """T·∫°o hash t·ª´ text"""
        print("\nüî® T·∫†O HASH:")
        
        text = input("üìù Nh·∫≠p text c·∫ßn hash: ").strip()
        if not text:
            print("‚ùå Text kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        text_bytes = text.encode('utf-8')
        
        # T·∫°o c√°c lo·∫°i hash
        md5_hash = hashlib.md5(text_bytes).hexdigest()
        sha1_hash = hashlib.sha1(text_bytes).hexdigest()
        sha256_hash = hashlib.sha256(text_bytes).hexdigest()
        
        print(f"\nüìä K·∫æT QU·∫¢ HASH:")
        print(f"MD5:    {md5_hash}")
        print(f"SHA1:   {sha1_hash}")
        print(f"SHA256: {sha256_hash}")
    
    def crack_hash(self):
        """Ki·ªÉm tra hash v·ªõi wordlist"""
        print("\nüîì KI·ªÇM TRA HASH V·ªöI WORDLIST:")
        
        target_hash = input("üéØ Nh·∫≠p hash c·∫ßn crack: ").strip().lower()
        if not target_hash:
            print("‚ùå Hash kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        # X√°c ƒë·ªãnh lo·∫°i hash
        hash_type = self.detect_hash_type(target_hash)
        print(f"üîç Lo·∫°i hash ƒë∆∞·ª£c ph√°t hi·ªán: {hash_type}")
        
        # T·∫°o wordlist ƒë∆°n gi·∫£n ho·∫∑c ƒë·ªçc t·ª´ file
        wordlist_choice = input("\nüìã Ch·ªçn wordlist:\n1. Wordlist m·∫∑c ƒë·ªãnh\n2. ƒê·ªçc t·ª´ file\nüëâ L·ª±a ch·ªçn: ").strip()
        
        if wordlist_choice == '1':
            wordlist = self.get_default_wordlist()
        elif wordlist_choice == '2':
            file_path = input("üìÅ ƒê∆∞·ªùng d·∫´n file wordlist: ").strip()
            wordlist = self.read_wordlist_file(file_path)
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            return
        
        if not wordlist:
            print("‚ùå Wordlist tr·ªëng!")
            return
        
        # B·∫Øt ƒë·∫ßu crack
        print(f"\nüöÄ B·∫Øt ƒë·∫ßu crack hash v·ªõi {len(wordlist)} t·ª´...")
        found = self.crack_hash_with_wordlist(target_hash, wordlist, hash_type)
        
        if found:
            print(f"‚úÖ CRACK TH√ÄNH C√îNG! Password: {found}")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y password trong wordlist")
    
    def detect_hash_type(self, hash_string):
        """Ph√°t hi·ªán lo·∫°i hash d·ª±a tr√™n ƒë·ªô d√†i"""
        length = len(hash_string)
        if length == 32:
            return "MD5"
        elif length == 40:
            return "SHA1"
        elif length == 64:
            return "SHA256"
        else:
            return "Unknown"
    
    def get_default_wordlist(self):
        """T·∫°o wordlist m·∫∑c ƒë·ªãnh"""
        return [
            "password", "123456", "password123", "admin", "root",
            "qwerty", "abc123", "123123", "password1", "admin123",
            "letmein", "welcome", "monkey", "dragon", "master"
        ]
    
    def read_wordlist_file(self, file_path):
        """ƒê·ªçc wordlist t·ª´ file"""
        try:
            with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:
                return [line.strip() for line in f if line.strip()]
        except Exception as e:
            print(f"‚ùå L·ªói ƒë·ªçc file: {e}")
            return []
    
    def crack_hash_with_wordlist(self, target_hash, wordlist, hash_type):
        """Crack hash v·ªõi wordlist"""
        hash_func = {
            "MD5": hashlib.md5,
            "SHA1": hashlib.sha1,
            "SHA256": hashlib.sha256
        }.get(hash_type)
        
        if not hash_func:
            print("‚ùå Lo·∫°i hash kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£!")
            return None
        
        for i, word in enumerate(wordlist):
            if i % 1000 == 0:
                print(f"   ƒê√£ th·ª≠ {i}/{len(wordlist)} t·ª´...")
            
            word_hash = hash_func(word.encode('utf-8')).hexdigest()
            if word_hash == target_hash:
                return word
        
        return None
    
    # ==================== 4. ENCRYPTION/DECRYPTION ====================
    def encryption_operations(self):
        """C√°c thao t√°c m√£ h√≥a/gi·∫£i m√£"""
        print("\nüîí M√É H√ìA / GI·∫¢I M√É")
        print("=" * 50)
        
        while True:
            print("\nüìã Ch·ªçn ch·ª©c nƒÉng:")
            print("1. Sinh key ng·∫´u nhi√™n")
            print("2. M√£ h√≥a text")
            print("3. Gi·∫£i m√£ text")
            print("4. M√£ h√≥a file")
            print("5. Gi·∫£i m√£ file")
            print("6. Quay l·∫°i menu ch√≠nh")
            
            choice = input("\nüëâ L·ª±a ch·ªçn (1-6): ").strip()
            
            if choice == '1':
                self.generate_key()
            elif choice == '2':
                self.encrypt_text()
            elif choice == '3':
                self.decrypt_text()
            elif choice == '4':
                self.encrypt_file()
            elif choice == '5':
                self.decrypt_file()
            elif choice == '6':
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
    
    def generate_key(self):
        """Sinh key ng·∫´u nhi√™n"""
        print("\nüîë SINH KEY NG·∫™U NHI√äN:")
        
        key = Fernet.generate_key()
        key_string = key.decode()
        
        print(f"üîê Key ƒë∆∞·ª£c t·∫°o: {key_string}")
        
        save_choice = input("\nüíæ L∆∞u key v√†o file? (y/n): ").strip().lower()
        if save_choice == 'y':
            filename = input("üìÅ T√™n file (m·∫∑c ƒë·ªãnh: secret.key): ").strip() or "secret.key"
            try:
                with open(filename, 'wb') as f:
                    f.write(key)
                print(f"‚úÖ Key ƒë√£ ƒë∆∞·ª£c l∆∞u v√†o {filename}")
            except Exception as e:
                print(f"‚ùå L·ªói l∆∞u file: {e}")
    
    def encrypt_text(self):
        """M√£ h√≥a text"""
        print("\nüîí M√É H√ìA TEXT:")
        
        text = input("üìù Nh·∫≠p text c·∫ßn m√£ h√≥a: ").strip()
        if not text:
            print("‚ùå Text kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        key = self.get_encryption_key()
        if not key:
            return
        
        try:
            fernet = Fernet(key)
            encrypted_text = fernet.encrypt(text.encode())
            encrypted_b64 = base64.b64encode(encrypted_text).decode()
            
            print(f"\nüîê Text ƒë√£ m√£ h√≥a: {encrypted_b64}")
            
        except Exception as e:
            print(f"‚ùå L·ªói m√£ h√≥a: {e}")
    
    def decrypt_text(self):
        """Gi·∫£i m√£ text"""
        print("\nüîì GI·∫¢I M√É TEXT:")
        
        encrypted_text = input("üîê Nh·∫≠p text ƒë√£ m√£ h√≥a: ").strip()
        if not encrypted_text:
            print("‚ùå Text kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        key = self.get_encryption_key()
        if not key:
            return
        
        try:
            fernet = Fernet(key)
            encrypted_bytes = base64.b64decode(encrypted_text.encode())
            decrypted_text = fernet.decrypt(encrypted_bytes).decode()
            
            print(f"\nüìù Text ƒë√£ gi·∫£i m√£: {decrypted_text}")
            
        except Exception as e:
            print(f"‚ùå L·ªói gi·∫£i m√£: {e}")
    
    def encrypt_file(self):
        """M√£ h√≥a file"""
        print("\nüîí M√É H√ìA FILE:")
        
        file_path = input("üìÅ ƒê∆∞·ªùng d·∫´n file c·∫ßn m√£ h√≥a: ").strip()
        if not os.path.exists(file_path):
            print("‚ùå File kh√¥ng t·ªìn t·∫°i!")
            return
        
        key = self.get_encryption_key()
        if not key:
            return
        
        try:
            with open(file_path, 'rb') as f:
                file_data = f.read()
            
            fernet = Fernet(key)
            encrypted_data = fernet.encrypt(file_data)
            
            encrypted_file_path = file_path + '.encrypted'
            with open(encrypted_file_path, 'wb') as f:
                f.write(encrypted_data)
            
            print(f"‚úÖ File ƒë√£ ƒë∆∞·ª£c m√£ h√≥a: {encrypted_file_path}")
            
        except Exception as e:
            print(f"‚ùå L·ªói m√£ h√≥a file: {e}")
    
    def decrypt_file(self):
        """Gi·∫£i m√£ file"""
        print("\nüîì GI·∫¢I M√É FILE:")
        
        file_path = input("üìÅ ƒê∆∞·ªùng d·∫´n file ƒë√£ m√£ h√≥a: ").strip()
        if not os.path.exists(file_path):
            print("‚ùå File kh√¥ng t·ªìn t·∫°i!")
            return
        
        key = self.get_encryption_key()
        if not key:
            return
        
        try:
            with open(file_path, 'rb') as f:
                encrypted_data = f.read()
            
            fernet = Fernet(key)
            decrypted_data = fernet.decrypt(encrypted_data)
            
            decrypted_file_path = file_path.replace('.encrypted', '.decrypted')
            with open(decrypted_file_path, 'wb') as f:
                f.write(decrypted_data)
            
            print(f"‚úÖ File ƒë√£ ƒë∆∞·ª£c gi·∫£i m√£: {decrypted_file_path}")
            
        except Exception as e:
            print(f"‚ùå L·ªói gi·∫£i m√£ file: {e}")
    
    def get_encryption_key(self):
        """L·∫•y key ƒë·ªÉ m√£ h√≥a/gi·∫£i m√£"""
        print("\nüîë Ch·ªçn c√°ch nh·∫≠p key:")
        print("1. Nh·∫≠p key tr·ª±c ti·∫øp")
        print("2. ƒê·ªçc key t·ª´ file")
        
        choice = input("üëâ L·ª±a ch·ªçn (1-2): ").strip()
        
        if choice == '1':
            key_string = input("üîê Nh·∫≠p key: ").strip()
            if not key_string:
                print("‚ùå Key kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
                return None
            try:
                return key_string.encode()
            except:
                print("‚ùå Key kh√¥ng h·ª£p l·ªá!")
                return None
                
        elif choice == '2':
            file_path = input("üìÅ ƒê∆∞·ªùng d·∫´n file key: ").strip()
            try:
                with open(file_path, 'rb') as f:
                    return f.read()
            except Exception as e:
                print(f"‚ùå L·ªói ƒë·ªçc file key: {e}")
                return None
        else:
            print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
            return None
    
    # ==================== 5. NETWORK TOOLS ====================
    def network_tools(self):
        """C√°c c√¥ng c·ª• network"""
        print("\nüåç NETWORK TOOLS")
        print("=" * 50)
        
        while True:
            print("\nüìã Ch·ªçn ch·ª©c nƒÉng:")
            print("1. Ping host")
            print("2. Traceroute")
            print("3. Port scan")
            print("4. Packet sniffing")
            print("5. Quay l·∫°i menu ch√≠nh")
            
            choice = input("\nüëâ L·ª±a ch·ªçn (1-5): ").strip()
            
            if choice == '1':
                self.ping_host()
            elif choice == '2':
                self.traceroute()
            elif choice == '3':
                self.port_scan()
            elif choice == '4':
                self.packet_sniffing()
            elif choice == '5':
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá!")
    
    def ping_host(self):
        """Ping m·ªôt host"""
        print("\nüèì PING HOST:")
        
        host = input("üéØ Nh·∫≠p hostname/IP: ").strip()
        if not host:
            print("‚ùå Host kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        count = input("üìä S·ªë l·∫ßn ping (m·∫∑c ƒë·ªãnh: 4): ").strip() or "4"
        
        try:
            if platform.system().lower() == "windows":
                cmd = f"ping -n {count} {host}"
            else:
                cmd = f"ping -c {count} {host}"
            
            print(f"\nüöÄ ƒêang ping {host}...")
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            print("üìä K·∫æT QU·∫¢ PING:")
            print(result.stdout)
            
            if result.stderr:
                print("‚ùå L·ªñI:")
                print(result.stderr)
                
        except Exception as e:
            print(f"‚ùå L·ªói khi ping: {e}")
    
    def traceroute(self):
        """Traceroute c∆° b·∫£n"""
        print("\nüõ§Ô∏è  TRACEROUTE:")
        
        host = input("üéØ Nh·∫≠p hostname/IP: ").strip()
        if not host:
            print("‚ùå Host kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        try:
            if platform.system().lower() == "windows":
                cmd = f"tracert {host}"
            else:
                cmd = f"traceroute {host}"
            
            print(f"\nüöÄ ƒêang trace route ƒë·∫øn {host}...")
            result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
            
            print("üìä K·∫æT QU·∫¢ TRACEROUTE:")
            print(result.stdout)
            
            if result.stderr:
                print("‚ùå L·ªñI:")
                print(result.stderr)
                
        except Exception as e:
            print(f"‚ùå L·ªói khi traceroute: {e}")
    
    def port_scan(self):
        """Qu√©t port c·ªßa m·ªôt host"""
        print("\nüîç PORT SCAN:")
        
        host = input("üéØ Nh·∫≠p hostname/IP: ").strip()
        if not host:
            print("‚ùå Host kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!")
            return
        
        port_range = input("üìä Nh·∫≠p range port (v√≠ d·ª•: 1-1000, m·∫∑c ƒë·ªãnh: 1-100): ").strip() or "1-100"
        
        try:
            start_port, end_port = map(int, port_range.split('-'))
            if start_port > end_port or start_port < 1 or end_port > 65535:
                print("‚ùå Range port kh√¥ng h·ª£p l·ªá!")
                return
        except:
            print("‚ùå Format range port kh√¥ng ƒë√∫ng! V√≠ d·ª•: 1-1000")
            return
        
        print(f"\nüöÄ ƒêang qu√©t port {start_port}-{end_port} tr√™n {host}...")
        self.scan_ports(host, start_port, end_port)
    
    def scan_ports(self, host, start_port, end_port):
        """Qu√©t port v·ªõi threading"""
        open_ports = []
        
        def scan_single_port(port):
            try:
                sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
                sock.settimeout(1)
                result = sock.connect_ex((host, port))
                if result == 0:
                    open_ports.append(port)
                sock.close()
            except:
                pass
        
        threads = []
        for port in range(start_port, end_port + 1):
            thread = threading.Thread(target=scan_single_port, args=(port,))
            threads.append(thread)
            thread.start()
            
            # Gi·ªõi h·∫°n s·ªë thread
            if len(threads) >= 50:
                for t in threads:
                    t.join()
                threads = []
        
        # ƒê·ª£i thread c√≤n l·∫°i
        for t in threads:
            t.join()
        
        print(f"\nüìä K·∫æT QU·∫¢ SCAN:")
        if open_ports:
            print(f"‚úÖ T√¨m th·∫•y {len(open_ports)} c·ªïng m·ªü:")
            for port in sorted(open_ports):
                service = self.get_service_name(port)
                print(f"   - Port {port}: {service}")
        else:
            print("‚ùå Kh√¥ng t√¨m th·∫•y c·ªïng m·ªü n√†o")
    
    def packet_sniffing(self):
        """Packet sniffing v·ªõi scapy"""
        print("\nüì° PACKET SNIFFING:")
        print("‚ö†Ô∏è  Ch·ª©c nƒÉng n√†y c·∫ßn quy·ªÅn admin/root!")
        
        try:
            from scapy.all import sniff, IP, TCP, UDP, ICMP
        except ImportError:
            print("‚ùå Scapy ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t!")
            return
        
        interface = input("üåê Interface (ƒë·ªÉ tr·ªëng = auto): ").strip() or None
        count = input("üìä S·ªë packet c·∫ßn b·∫Øt (m·∫∑c ƒë·ªãnh: 10): ").strip() or "10"
        
        try:
            count = int(count)
        except:
            count = 10
        
        print(f"\nüöÄ B·∫Øt ƒë·∫ßu sniff {count} packets...")
        print("‚èπÔ∏è  Nh·∫•n Ctrl+C ƒë·ªÉ d·ª´ng")
        
        def packet_handler(packet):
            if IP in packet:
                ip_src = packet[IP].src
                ip_dst = packet[IP].dst
                
                if TCP in packet:
                    protocol = "TCP"
                    sport = packet[TCP].sport
                    dport = packet[TCP].dport
                elif UDP in packet:
                    protocol = "UDP"
                    sport = packet[UDP].sport
                    dport = packet[UDP].dport
                elif ICMP in packet:
                    protocol = "ICMP"
                    sport = dport = "N/A"
                else:
                    protocol = "OTHER"
                    sport = dport = "N/A"
                
                timestamp = datetime.now().strftime("%H:%M:%S")
                print(f"[{timestamp}] {protocol}: {ip_src}:{sport} -> {ip_dst}:{dport}")
        
        try:
            sniff(iface=interface, prn=packet_handler, count=count)
            print("\n‚úÖ Packet sniffing ho√†n th√†nh!")
        except Exception as e:
            print(f"‚ùå L·ªói khi sniff packet: {e}")
            print("üí° Th·ª≠ ch·∫°y v·ªõi quy·ªÅn admin/root")
    
    # ==================== MAIN FUNCTION ====================
    def run(self):
        """Ch·∫°y tool ch√≠nh"""
        self.show_banner()
        
        while True:
            self.show_menu()
            choice = input("\nüëâ L·ª±a ch·ªçn c·ªßa b·∫°n (1-6): ").strip()
            
            if choice == '1':
                self.get_system_info()
            elif choice == '2':
                self.web_security_check()
            elif choice == '3':
                self.hash_operations()
            elif choice == '4':
                self.encryption_operations()
            elif choice == '5':
                self.network_tools()
            elif choice == '6':
                print("\nüëã C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng Security Tool!")
                print("üîí H√£y lu√¥n gi·ªØ an to√†n th√¥ng tin!")
                break
            else:
                print("‚ùå L·ª±a ch·ªçn kh√¥ng h·ª£p l·ªá! Vui l√≤ng ch·ªçn t·ª´ 1-6.")
            
            input("\n‚è∏Ô∏è  Nh·∫•n Enter ƒë·ªÉ ti·∫øp t·ª•c...")

if __name__ == "__main__":
    try:
        tool = SecurityTool()
        tool.run()
    except KeyboardInterrupt:
        print("\n\nüëã Tool ƒë√£ ƒë∆∞·ª£c d·ª´ng b·ªüi ng∆∞·ªùi d√πng!")
    except Exception as e:
        print(f"\n‚ùå L·ªói kh√¥ng mong mu·ªën: {e}")
